# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.host import Host  # noqa: F401,E501
from swagger_server import util


class Listing(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: int=None, name: str=None, host: Host=None, neighbourhood: str=None, area: str=None, latitude: float=None, longitude: float=None, room_type: str=None, price: int=None, min_nights: int=None, num_of_reviews: int=None, availability: int=None):  # noqa: E501
        """Listing - a model defined in Swagger

        :param id: The id of this Listing.  # noqa: E501
        :type id: int
        :param name: The name of this Listing.  # noqa: E501
        :type name: str
        :param host: The host of this Listing.  # noqa: E501
        :type host: Host
        :param neighbourhood: The neighbourhood of this Listing.  # noqa: E501
        :type neighbourhood: str
        :param area: The area of this Listing.  # noqa: E501
        :type area: str
        :param latitude: The latitude of this Listing.  # noqa: E501
        :type latitude: float
        :param longitude: The longitude of this Listing.  # noqa: E501
        :type longitude: float
        :param room_type: The room_type of this Listing.  # noqa: E501
        :type room_type: str
        :param price: The price of this Listing.  # noqa: E501
        :type price: int
        :param min_nights: The min_nights of this Listing.  # noqa: E501
        :type min_nights: int
        :param num_of_reviews: The num_of_reviews of this Listing.  # noqa: E501
        :type num_of_reviews: int
        :param availability: The availability of this Listing.  # noqa: E501
        :type availability: int
        """
        self.swagger_types = {
            'id': int,
            'name': str,
            'host': Host,
            'neighbourhood': str,
            'area': str,
            'latitude': float,
            'longitude': float,
            'room_type': str,
            'price': int,
            'min_nights': int,
            'num_of_reviews': int,
            'availability': int
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'host': 'host',
            'neighbourhood': 'neighbourhood',
            'area': 'area',
            'latitude': 'latitude',
            'longitude': 'longitude',
            'room_type': 'roomType',
            'price': 'price',
            'min_nights': 'minNights',
            'num_of_reviews': 'numOfReviews',
            'availability': 'availability'
        }
        self._id = id
        self._name = name
        self._host = host
        self._neighbourhood = neighbourhood
        self._area = area
        self._latitude = latitude
        self._longitude = longitude
        self._room_type = room_type
        self._price = price
        self._min_nights = min_nights
        self._num_of_reviews = num_of_reviews
        self._availability = availability

    @classmethod
    def from_dict(cls, dikt) -> 'Listing':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Listing of this Listing.  # noqa: E501
        :rtype: Listing
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this Listing.


        :return: The id of this Listing.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this Listing.


        :param id: The id of this Listing.
        :type id: int
        """

        self._id = id

    @property
    def name(self) -> str:
        """Gets the name of this Listing.


        :return: The name of this Listing.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Listing.


        :param name: The name of this Listing.
        :type name: str
        """

        self._name = name

    @property
    def host(self) -> Host:
        """Gets the host of this Listing.


        :return: The host of this Listing.
        :rtype: Host
        """
        return self._host

    @host.setter
    def host(self, host: Host):
        """Sets the host of this Listing.


        :param host: The host of this Listing.
        :type host: Host
        """

        self._host = host

    @property
    def neighbourhood(self) -> str:
        """Gets the neighbourhood of this Listing.


        :return: The neighbourhood of this Listing.
        :rtype: str
        """
        return self._neighbourhood

    @neighbourhood.setter
    def neighbourhood(self, neighbourhood: str):
        """Sets the neighbourhood of this Listing.


        :param neighbourhood: The neighbourhood of this Listing.
        :type neighbourhood: str
        """

        self._neighbourhood = neighbourhood

    @property
    def area(self) -> str:
        """Gets the area of this Listing.


        :return: The area of this Listing.
        :rtype: str
        """
        return self._area

    @area.setter
    def area(self, area: str):
        """Sets the area of this Listing.


        :param area: The area of this Listing.
        :type area: str
        """

        self._area = area

    @property
    def latitude(self) -> float:
        """Gets the latitude of this Listing.


        :return: The latitude of this Listing.
        :rtype: float
        """
        return self._latitude

    @latitude.setter
    def latitude(self, latitude: float):
        """Sets the latitude of this Listing.


        :param latitude: The latitude of this Listing.
        :type latitude: float
        """

        self._latitude = latitude

    @property
    def longitude(self) -> float:
        """Gets the longitude of this Listing.


        :return: The longitude of this Listing.
        :rtype: float
        """
        return self._longitude

    @longitude.setter
    def longitude(self, longitude: float):
        """Sets the longitude of this Listing.


        :param longitude: The longitude of this Listing.
        :type longitude: float
        """

        self._longitude = longitude

    @property
    def room_type(self) -> str:
        """Gets the room_type of this Listing.


        :return: The room_type of this Listing.
        :rtype: str
        """
        return self._room_type

    @room_type.setter
    def room_type(self, room_type: str):
        """Sets the room_type of this Listing.


        :param room_type: The room_type of this Listing.
        :type room_type: str
        """

        self._room_type = room_type

    @property
    def price(self) -> int:
        """Gets the price of this Listing.


        :return: The price of this Listing.
        :rtype: int
        """
        return self._price

    @price.setter
    def price(self, price: int):
        """Sets the price of this Listing.


        :param price: The price of this Listing.
        :type price: int
        """

        self._price = price

    @property
    def min_nights(self) -> int:
        """Gets the min_nights of this Listing.


        :return: The min_nights of this Listing.
        :rtype: int
        """
        return self._min_nights

    @min_nights.setter
    def min_nights(self, min_nights: int):
        """Sets the min_nights of this Listing.


        :param min_nights: The min_nights of this Listing.
        :type min_nights: int
        """

        self._min_nights = min_nights

    @property
    def num_of_reviews(self) -> int:
        """Gets the num_of_reviews of this Listing.


        :return: The num_of_reviews of this Listing.
        :rtype: int
        """
        return self._num_of_reviews

    @num_of_reviews.setter
    def num_of_reviews(self, num_of_reviews: int):
        """Sets the num_of_reviews of this Listing.


        :param num_of_reviews: The num_of_reviews of this Listing.
        :type num_of_reviews: int
        """

        self._num_of_reviews = num_of_reviews

    @property
    def availability(self) -> int:
        """Gets the availability of this Listing.


        :return: The availability of this Listing.
        :rtype: int
        """
        return self._availability

    @availability.setter
    def availability(self, availability: int):
        """Sets the availability of this Listing.


        :param availability: The availability of this Listing.
        :type availability: int
        """

        self._availability = availability
